* AppPAL
** Policies
*** BYOD

- Translating policies for
  - SANS
  - NHS Torbay

**** TODO Which attributes described in SecPAL paper are needed to express BYOD policies?
**** TODO David to chase /Mobile Iron/.

*** Property checking

- Stop calling it Lint.
- Completeness is to be renamed /satisfiability/ or /derivability/.

**** TODO Survey XACML methods for property checking

** Knowledge Distribution

*** Modelling protocols in Pi-Calculus

What happens when you compose policies from different places which conflict?



*** TODO what policies are there that really need to be distributed?

*** What happens when time becomes a part of a policy?

** Uncertain Knowledge
   - Annotation on ~says~ part of SecPAL.
   - Quantified with respect to belief in any given statement.
   - How do you handle independence
  
*** TODO lit survey

** Tasks
*** TODO Find an expert to ask about policies
    - /Naranka Dulay/ at Imperial?
    - Michael Ravatsos at Edinburgh?
*** TODO [4/7] Read Papers added to Zotero
- [ ] XACML 3.0 in Answer Set Programming. /Carroline Dewi Puspa Kencana Ramli, Hanne Riis Nielson, and Flemming Nielson./
- [X] The Logic of XACML. /Carroline Dewi Puspa Kencana Ramli, Hanne Riis Nielson, and Flemming Nielson./

Presents formalization of XACML, and derives a logic that represents it.
Very readable given the dryness of the subject.
    
- [ ] Access Control via Belnap Logic: Intuitive, Expressive, and Analyzable Policy Composition. /Glenn Bruns, Michael Huth./
- [X] Access Control in an Open Distributed Environment. /R.J. Hayton, J.M. Bacon, K. Moody./

Seems to be an explanation of an early OASIS based system.
Not sure what's meant to be interesting about it.

- [ ] Formalisation and Implementation of the XACML Access Control Mechanism. /Massimilano Masi, Roario Pugliese, Francesco Tiezzi./
- [X] Synthesising Verified Access Control Systems in XACML. /Nan Zhang, Mark Ryan, Dimitar P. Guelev./

They take a toy system called RW and show how it can be implemented in XACML.
Again, this seems like a pile of highly citable but not interesting poop.

- [X] Detecting Incompleteness, Conflicting and Unreachability XACML Policies using Answer Set Programming. /Carroline Dewi Puspa Kencana Ramli./

Really useful.   See work from <2016-04-20 Wed>.





** Other things
   - David to switch my funding from /Intel/ to /App Guarden/ from /April/ to /June/ for expenses reasons.x

* Log Book

** 2016
*** Week 14
**** <2016-04-15 Fri>
Meeting with David.
[[file:2016-04-15-Meeting.jpg]]
*** Week 15
**** <2016-04-19 Tue>
**** <2016-04-20 Wed>
***** Read /Detecting Incompleteness, Conflicting and Unreachable XACML Policies/.

Fascinating work.
Seems to join together much of the other work by the Nielson papers on Answer Set programming in XACML.

Gives definitions of many of the properties we're interested in for AppPAL using ASP, as well as the mechanisms for translating XACML into ASP.
Seems to link to other interesting work.

Can we define AppPAL verisions of their properties?
****** AppPAL versions
******* Conflict
******** XACML
Given two /rules/ in a /policy set/: *R* and *Rʹ*.

*Conflict* ← ∃Q: ⟦R⟧(Q) = =permit= ∧ ⟦Rʹ⟧(Q) = =deny=.
******** AppPAL

*Conflict* ← ∃ a, x, p: AC ⊧ /a/ =says= /x/ =is= /p/. ∧ AC ⊧ /a/ =says= /x/ =isnot= /p/.

We could probably even do this in AppPAL itself, provided we have some way of marking which policies are going to conflict:

#+BEGIN_SRC apppal
A says A isConflictedAbout(X, P) if
  X is(P),
  X isNot(P),
  P isProperty.
#+END_SRC

Of course this is *precisely* the sort of thing my implementation is slow at evaluating...

**** <2016-04-21 Thu>
- A strange woman has come and fiddled about with DF's computer.
  - Apparently to upgrade it to SL7.
- Much learning of Org-mode today
  - Loving this so much.
  - It is essentially my notebooks

Quite useful for autoreplacement?
#+BEGIN_SRC lisp
(define-abbrev-table 'global-abbrev-table
  '(("alpha" "α")
    ("inf" "∞")
    ("exists" "∃")
    ("forall" "∀")
    ("and" "∧")
    ("or" "∨")))
(abbrev-mode 1)
#+END_SRC


***** Plan for today
***** Jobs [4/4]
- [X] Search for literature on temporally sensitive access control languages
- [X] Submit expenses claim for iFM
- [X] What other safety properties might we want for AppPAL with time
  - first attempt!
- [X] Sketch change of semantics
  - first attempt!
    
****** Lit Survey 
******* The Ponder Polcy Specification Language. /Nocodemos Damianou, Naranker Dulay, Emil Lupu, Morris Sloman./
I've looked at Ponder before, but its got some stuff on this in it so it's worth anouther look.

Ponder is a policy language with delegation, obligation (if you do this then you *must* do this too), and some form of constraint.
There is some stuff about composition in here, but it's not general enough and assumes everyone is using (roughly) the same schema.
Delegations can be limited to within certain timeframes.

#+BEGIN_SRC ponder
inst deleg+ (switchPolicyOps) delegSwitchOps {
   grantee     /DomainAdmin ;
   target      /Nregion/switches/typeA ;
   action      enable(), disable();
   valid       time.duration(24) ;
}
#+END_SRC

Doesn't seem to be taken any further than this though.
******* TODO A Generalized Temporal Role-Based Access Control Model. /JBD Joshi, E Bertino, U Latif, A Ghafoor./
******* A Spatio-Temporal Role-based Access Control Model. /Inrakshi Ray, Manachai Toahchoodee./
RBAC based scheme with lots of definitions of constraints and properties you might like to use for access control with time and space concerns.
Might be useful for stealing some of these constraints, but there isn't any validation that the constraints are the actual ones we want and correct.
****** Semantics
We want to introduce some notion of /liveliness/ for AppPAL assertions.
******* Attempt 1
- A *time* is an absolute point in time.
  - =2016-04-19 10:00= means 10am on the 19th of April 2016.
  - Should be representable as a single number (i.e. seconds since 1970)
- An *offset* is a relative point in time where:
  - =0= means now
  - =+1= means 1 unit of time in the future
  - =-1= means 1 unit of time in the past
- A *timeframe* is a tuple of times or offsets =(from, to)=
  - CONSTRAINT: =from= ≤ =to=.

  - =[-1, +2]= means any time between one second ago, and two seconds into the future.
  - =[2016-04-19 10:00, 2016-04-20 10:00]= means any time between 10am on the 19th April 2016 and the 20th.

- All assertions are timestamped which we write:
  - ='alice' says^{2016-04-19 10:00} 'bob' canRead('my-key').=
  - In general:
    - /X/ says^t /fact/.

    - If a statement is missing its timestamp, then it is implicitly assumed to be -∞.
******* Attempt 2

All assertions are made at =[x, y]=, where =x= is the time from which an assertion is valid, and =y= is the time after which it is not valid.
******** Conditional
- AC, D |= A says^{[x, y]} f
  - exists (A says^{[x0, y0]} f if f_1 ... f_n; c) in AC
  - forall i in [1..n]. AC, D |= A says^{[xi, yi]} f_i
  - |= c
  - forall i in [0..n]. x >= x_i and y <= y_i (statement valid at the time)
  - forall i. x_i <= y_i  (time sanity)
******** Can Say
- AC, D |= A says^{[x, y]} fact
  - AC, D |= A says^{[x0, y0]} B can-say^{[x1, y1]} D' fact
  - AC, D' |= B says^{[x2, y2]} fact
  - forall i. x_i <= y_i (time sanity)
  - forall i in [0..2]. x >= x_i and y <= y_i (statement valid at the time)
  - x_1 >= x_2 and y_1 <= y_2 (delegated statment fresh)
******** Can Act As
- AC, D |= A says^{[x, y]} n vp
  - AC, D |= A says^{[x0, y0]} m can-act-as^{[x1, y1]} n
  - AC, D |= A says^{[x2, y2]} m vp
  - forall i. x_i <= y_i (time sanity)
  - forall i in [0..2]. x >= x_i and y <= y_i (statement valid at the time)
  - x_1 >= x_2 and y_1 <= y_2 (role assignment fresh)
  
******* Properties we might want:
  - A speaker should be able to say how long any statement by them is valid for.

  - In a conditional, or delegation we should be able to require an assertion to be fresh.

  - An assertion derived from other assertions should not be valid for any longer than any assertion it depends on.

    - i.e. if a proof depends on an expired assertion then that proof is also expired.

  - If a proof was valid at a given point, then it should remain valid (at that given point).

    - i.e. we can check an old decision was sound.

      
  

**** <2016-04-22 Fri>

Wasted a lot of time this morning sorting emacs out.
Turns out I don't really understand how the load path works.
It's working now though and the changes are (force) pushed to the repo.

Oh god I should really be writing my thesis.

***** DONE Read _A Generalized Temporal Role-Based Access Control Model_ for real this time.

GTRBAC is the short name

*Periodicity Constraints* define the exact intervals a role can be activated.
E.g. A /DayDoctor/ works from 9am--9pm every day:

*Duration constraints* define how long a role is valid for.
E.g. A Doctor can be on call for 12 hours.

There can be conflicts with GTRBAC policies namely
- where two roles get activated at the same time, which both disable and enable another role.
  - not an issue in AppPAL: no obligation rules.
- circular dependencies
  - don't think this is an issue.  No negation.
- constraints where there is a constraint on role enabling and disabling that mean that you can't do anything useful
  - might be an issue if we do the negation stuff


***** TODO Email David progress report

#+BEGIN_QUOTE
Hi David,

Mostly spent this week getting to grips with XACML, and the various formalizations on top of it.

Whilst going through the papers we found last week came across another one by CDPK Ramli (who worked with the Nielsons on formalising XACML in answer set programming) on “Detecting Incompleteness, Conflicting and Unreachable XACML Policies using Answer Set Programming”.

It seems like many of the problems they get come from XACMLs various conflict resolution approaches, and a fair bit of it is applicable to AppPAL without too much effort.  Might be worth having a look at whether I can translate AppPAL to ASP (shouldn’t be too hard given that Datalog can be).

Also started going over the literature for time dependent policy languages and access controls.
Seems like there was a lot of work with various RBAC based languages (Elisa Bertino turns up a lot).
Going over it all now, a lot seems fairly similar to the kind of scheme we sketched out, but a lot of problems relating to whether roles actually get activated and deactivated and conflicts derived from them (which seems RBAC specific).

Started playing with how adding time like this might affect AppPAL.
I think I have something workable, but needs more thought.
Also started thinking about the properties we might want.

—
Joseph.
#+END_QUOTE

***** TODO What idioms from SecPAL paper do we actually need for AppPAL BYOD?

Oh. Most of them.

****** Discretionary Access Control

#+BEGIN_SRC apppal
'admin' says User can-say inf X canRead(f) if User canRead(f).
#+END_SRC apppal

Seems reasonable that we might want to do this, especially in BYOD policies.
We might even want to say that a user's phone can access anything that the user can access.

****** Mandatory Access Control

#+BEGIN_SRC apppal
'admin' says X can-read(F) 
  if F hasClassification(Classification),
     X hasClearance(Clearance)
  where Clearance >= Classification.
#+END_SRC apppal

Occurs in NHS policy for who can authorize apps.

****** Role Hierarchies

#+BEGIN_SRC apppal
'nhs' says 'foundation-trainee' canRead('file://doc').
'nhs' says 'specialist-trainee' can-act-as 'foundation-trainee'.
'nhs' says 'registrar' can-act-as 'specialist-trainee'.
'nhs' says 'consultant' can-act-as 'registrar'.
#+END_SRC

*** Week 16
**** Jobs
***** DONE Return DA's stuff to him
***** DONE Clean desk

**** <2016-04-25 Mon>
***** DONE What are the *precise* differences between AppPAL and XACML?
- A _policy set_ is a collection of policies
  - Maps to an *assertion context*
- A _policy_ is a collection of rules encoding a single conceptual decision, and the means for combining the results of evalutating the rules
  - Maps to the set of *assertions* that all have the same fact after the =says=
  - AppPAL effectively only uses the _permit-overrides_ combining algorithm.
    If any of the _rules_ in the policy evaluates to true, then the _policy_ 
- A _rule_ is a boolean decision process
  - Maps to an *assertion*

- A _subject_ is the entity requesting access
  - Maps the the *subject* of the fact after the =says=
- An _action_ is the type of access requested
  - Maps to the *verb-phrase predicate*
- A _resource_ is something with attributes
  - A *constant*? A *subject* of a fact?
- An _environment_ is the optional source of additional information
  - The evaluation of the _constraint_?

- XACML has four _policy_ combining algorithms:
  - _Deny-overrides_: if a single rule evaluates to _DENY_ then the policy evaluates to deny
  - _Permit-overrides_: if a single rule evaluates to _PERMIT_ then the policy evaluates to permit
  - _First-applicable_: the first rule that evaluates successfully (i.e. no error when evaluating) defines what the outcome is.
  - _Only-one_: requires that only one policy can apply to a decision and that that decides what the result is.  Anything other than one results in _NOT-APPLICABLE_ or _INDETERMINATE_ results.
  
  - AppPAL effectively only does _permit-overrides_.

- Decisions can have multiple subjects, or be based on attributes about their subjects
  - Handled by *parameterized predicates* and *conditionals* in AppPAL

- _Operators_ (Section 2.8 Line 365) allow data from XACML to be manipulated, e.g. adding numbers, checking path components, and negating rules.
  - Some of this you can do with AppPAL constraints, i.e. manipulating attributes which map to numbers.
  - Negation of facts you can't do in AppPAL

- _Policy Distribution_ (Section 2.9 Line 394), XACML policies could be distributed but they don't give any means for doing so.
  - AppPAL doesn't give the precise mechanisms, but by tying all assertions to a given speaker and using that speaker as part of all evaluation rules it mostly falls out quite neatly.

- _Policy Indexing_ (Section 2.10 Line 406) allows policies to be stored in an ordered form and queried about their /ordering/
  - No support in AppPAL

- _Action Policies_ (Section 2.12 Line 442) allow policies to spcifiy _obligations_ that they must discharge if the decision is used (for example logging certain actions).
  - AppPAL doesn't support these

- _Advice_ (3.3.1.5 line 567) gives additional metadata about how rules /could/ be used which the enforcement point is free to ignore
  - AppPAL doesn't support these
  - At least in part because AppPAL just gives the decision, not any of the surrounding enforcement.
 
- _Delegation_
  - So it turns out the actual XACML 3.0 spec doesn't really mention delegation.
    - It mentions a max delegation depth tag
  - It does refer to a document [[http://docs.oasis-open.org/xacml/3.0/xacml-3.0-administration-v1-spec-cd-03-en.doc%20%20%20%20][OASIS Committee Draft 03, XACML v3.0 Administration and Delegation Profile Version 1.0]] that does give some semantics.
  - Three use-cases given:
    - _Policy administration_.  Someone else writes the policies.  Go import them before doing anything.
    - _Dynamic delegation_.  Someone else writes the policies., but they're going to change over time and the person who specifies them now may not be allowed to specifiy them later.  Go import them and delete them after they expire.
    - _Only if X is permitted to do it_.  You can do something only if someone else can do it.  I.e. Alice can fill in for Bob when he's on holiday.
  - AppPAL's can-say statement and implicit speakers handle the first two, and there is no need to revoke, just to change the *can-say* statement.
  - The *can-act-as* statement handles the third case.




  - 
****** Example
******* Example 1.

#+BEGIN_QUOTE
652 Assume that a corporation named Medi Corp (identified by its domain name: med.example.com) has an
653 access control policy that states, in English:
654   Any user with an e-mail name in the "med.example.com" namespace is allowed to perform any action on
655   any resource.
#+END_QUOTE

#+BEGIN_SRC xml
 [a1]     <?xml version="1.0" encoding="UTF-8"?>
 [a2]     <Policy
 [a3]       xmlns="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"
 [a4]       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 [a5]       xsi:schemaLocation="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17
 [a6]       http://docs.oasis-open.org/xacml/3.0/xacml-core-v3-schema-wd-17.xsd"
 [a7]       PolicyId="urn:oasis:names:tc:xacml:3.0:example:SimplePolicy1"
 [a8]       Version="1.0"
 [a9]       RuleCombiningAlgId="identifier:rule-combining-algorithm:deny-overrides">
[a10]       <Description>
[a11]         Medi Corp access control policy
[a12]       </Description>
[a13]       <Target/>
[a14]       <Rule
[a15]         RuleId= "urn:oasis:names:tc:xacml:3.0:example:SimpleRule1"
[a16]         Effect="Permit">
[a17]         <Description>
[a18]           Any subject with an e-mail name in the med.example.com domain
[a19]           can perform any action on any resource.
[a20]         </Description>
[a21]         <Target>
[a22]           <AnyOf>
[a23]             <AllOf>
[a24]               <Match
[a25]                 MatchId="urn:oasis:names:tc:xacml:1.0:function:rfc822Name-match">
[a26]               <AttributeValue
[a27]                 DataType="http://www.w3.org/2001/XMLSchema#string"
[a28]                   >med.example.com</AttributeValue>
[a29]               <AttributeDesignator
[a30]                 MustBePresent="false"
[a31]                 Category="urn:oasis:names:tc:xacml:1.0:subject-category:access-subject"
[a32]                 AttributeId="urn:oasis:names:tc:xacml:1.0:subject:subject-id"
[a33]                 DataType="urn:oasis:names:tc:xacml:1.0:data-type:rfc822Name"/>
[a34]               </Match>
[a35]             </AllOf>
[a36]           </AnyOf>
[a37]         </Target>
[a38]       </Rule>
[a39]     </Policy>
#+END_SRC

#+BEGIN_SRC apppal
'medicorp' says User canPerform(Action, Resource)
  if Action isAction,
     Resource isResource,
     User hasEmailAddr(Email)
  where 
    inNameSpace(Email, 'med.example.com') = true.
#+END_SRC

AppPAL version is significantly shorter and clearer, but can't abstract the /can perform any action/ aspect neatly.
 
******* Example 2.

#+BEGIN_QUOTE
1. A person, identified by his or her patient number, may read any record for which he or she is the designated patient.
2. A person may read any record for which he or she is the designated parent or guardian, and for which the patient is under 16 years of age.
3. A physician may write to any medical element for which he or she is the designated primary care physician, provided an email is sent to the patient.
4. An administrator shall not be permitted to read or write to medical elements of a patient record.
#+END_QUOTE

#+BEGIN_SRC apppal
'medicorp' says Patient canRead(Record)
  if Patient hasPatientNumber(N),
     Record hasDesignatedPatientNumber(N).

'medicorp' says Person canRead(Record)
  if Record hasDesignatedPatientNumber(N),
     Patient hasPatientNumber(N),
     Person isGuardianOf(Patient)
  where
    age(Patient) < 16.

'medicord' says Physician canWrite(Record)
  if Record hasPrimaryCarePhysician(Physician),
     Record hasPatientNumber(N),
     Patient hasPatientNumber(N),
     Physician hasEmailed(Patient).
#+END_SRC

Rule 4 is unnecessary in AppPAL as everything requires explicit authorization, but if we allow negated predicates then this could be implemented:

#+BEGIN_SRC apppal
'medicord' says Administrator canNotRead(Record)
  if Administrator can-act-as 'Administrator',
     Record isMedicalRecord.

'medicord' says Administrator canNotWrite(Record)
  if Administrator can-act-as 'Administrator',
     Record isMedicalRecord.
#+END_SRC


#+BEGIN_SRC xml
     [f1]     <?xml version="1.0" encoding="UTF-8"?>
     [f2]     <Policy
     [f3]       xmlns="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"
     [f4]       xmlns:xacml ="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"
     [f5]       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     [f6]       xmlns:md="http://www.med.example.com/schemas/record.xsd"
     [f7]       PolicyId="urn:oasis:names:tc:xacml:3.0:example:policyid:1"
     [f8]       RuleCombiningAlgId="urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:deny-overrides"
     [f9]       Version="1.0">
    [f10]       <PolicyDefaults>
    [f11]         <XPathVersion>http://www.w3.org/TR/1999/REC-xpath-19991116</XPathVersion>
    [f12]       </PolicyDefaults>
    [f13]       <Target/>
    [f14]       <VariableDefinition VariableId="17590034">
    [f15]         <Apply FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
    [f16]           <Apply
    [f17]             FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-one-and-only">
    [f18]             <AttributeDesignator
    [f19]               MustBePresent="false"
    [f20]               Category="urn:oasis:names:tc:xacml:1.0:subject-category:access-subject"
    [f21]               AttributeId="urn:oasis:names:tc:xacml:3.0:example:attribute:patient-number"
    [f22]               DataType="http://www.w3.org/2001/XMLSchema#string"/>
    [f23]           </Apply>
    [f24]           <Apply
    [f25]             FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-one-and-only">
    [f26]             <AttributeSelector
    [f27]                 MustBePresent="false"
    [f28]                 Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
    [f29]                 Path="md:record/md:patient/md:patient-number/text()"
    [f30]               DataType="http://www.w3.org/2001/XMLSchema#string"/>
    [f31]           </Apply>
    [f32]         </Apply>
    [f33]       </VariableDefinition>
    [f34]       <Rule
    [f35]         RuleId="urn:oasis:names:tc:xacml:3.0:example:ruleid:1"
    [f36]         Effect="Permit">
    [f37]         <Description>
    [f38]           A person may read any medical record in the
    [f39]           http://www.med.example.com/schemas/record.xsd namespace
    [f40]           for which he or she is the designated patient
    [f41]         </Description>
    [f42]         <Target>
    [f43]           <AnyOf>
    [f44]             <AllOf>
    [f45]               <Match MatchId="urn:oasis:names:tc:xacml:1.0:function:anyURI-equal">
    [f46]                 <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#anyURI"
    [f47]                  >urn:example:med:schemas:record</AttributeValue>
    [f48]                 <AttributeDesignator
    [f49]                   MustBePresent="false"
    [f50]                 Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
    [f51]                 AttributeId="urn:oasis:names:tc:xacml:2.0:resource:target-namespace"
    [f52]                 DataType="http://www.w3.org/2001/XMLSchema#anyURI"/>
    [f53]               </Match>
    [f54]               <Match
    [f55]                 MatchId="urn:oasis:names:tc:xacml:3.0:function:xpath-node-match">
    [f56]                 <AttributeValue
    [f57]                   DataType="urn:oasis:names:tc:xacml:3.0:data-type:xpathExpression"
    [f58]            XPathCategory="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
    [f59]                     >md:record</AttributeValue>
    [f60]                 <AttributeDesignator
    [f61]                   MustBePresent="false"
    [f62]                  Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
    [f63]                  AttributeId="urn:oasis:names:tc:xacml:3.0:content-selector"
    [f64]                  DataType="urn:oasis:names:tc:xacml:3.0:data-type:xpathExpression"/>
    [f65]               </Match>
    [f66]             </AllOf>
    [f67]           </AnyOf>
    [f68]           <AnyOf>
    [f69]             <AllOf>
    [f70]               <Match
    [f71]                 MatchId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
    [f72]                 <AttributeValue
    [f73]                   DataType="http://www.w3.org/2001/XMLSchema#string"
    [f74]                    >read</AttributeValue>
    [f75]                 <AttributeDesignator
    [f76]                   MustBePresent="false"
    [f77]                   Category="urn:oasis:names:tc:xacml:3.0:attribute-category:action"
    [f78]                   AttributeId="urn:oasis:names:tc:xacml:1.0:action:action-id"
    [f79]                   DataType="http://www.w3.org/2001/XMLSchema#string"/>
    [f80]               </Match>
    [f81]             </AllOf>
    [f82]           </AnyOf>
    [f83]         </Target>
    [f84]         <Condition>
    [f85]           <VariableReference VariableId="17590034"/>
    [f86]         </Condition>
    [f87]       </Rule>
    [f88]     </Policy>

[g1]     <?xml version="1.0" encoding="UTF-8"?>
     [g2]     <Policy
     [g3]       xmlns="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"
     [g4]       xmlns:xacml="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"
     [g5]       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     [g6]       xmlns:xf="http://www.w3.org/2005/xpath-functions"
     [g7]       xmlns:md="http:www.med.example.com/schemas/record.xsd"
     [g8]       PolicyId="urn:oasis:names:tc:xacml:3.0:example:policyid:2"
     [g9]       Version="1.0"
    [g10]       RuleCombiningAlgId="urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:deny-overrides">
    [g11]       <PolicyDefaults>
    [g12]         <XPathVersion>http://www.w3.org/TR/1999/REC-xpath-19991116</XPathVersion>
    [g13]       </PolicyDefaults>
    [g14]       <Target/>
    [g15]       <VariableDefinition VariableId="17590035">
    [g16]         <Apply
    [g17]           FunctionId="urn:oasis:names:tc:xacml:1.0:function:date-less-or-equal">
    [g18]           <Apply
    [g19]             FunctionId="urn:oasis:names:tc:xacml:1.0:function:date-one-and-only">
    [g20]             <AttributeDesignator
    [g21]               MustBePresent="false"
    [g22]               Category="urn:oasis:names:tc:xacml:3.0:attribute-category:environment"
    [g23]               AttributeId="urn:oasis:names:tc:xacml:1.0:environment:current-date"
    [g24]               DataType="http://www.w3.org/2001/XMLSchema#date"/>
    [g25]           </Apply>
    [g26]           <Apply
    [g27]       FunctionId="urn:oasis:names:tc:xacml:1.0:function:date-add-yearMonthDuration">
    [g28]             <Apply
    [g29]               FunctionId="urn:oasis:names:tc:xacml:1.0:function:date-one-and-only">
    [g30]               <AttributeSelector
    [g31]                 MustBePresent="false"
    [g32]                 Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
    [g33]                 Path="md:record/md:patient/md:patientDoB/text()"
    [g34]                 DataType="http://www.w3.org/2001/XMLSchema#date"/>
    [g35]             </Apply>
    [g36]             <AttributeValue
    [g37]               DataType="http://www.w3.org/2001/XMLSchema#yearMonthDuration"
    [g38]               >P16Y</AttributeValue>
    [g39]           </Apply>
    [g40]         </Apply>
    [g41]       </VariableDefinition>
    [g42]       <Rule
    [g43]         RuleId="urn:oasis:names:tc:xacml:3.0:example:ruleid:2"
    [g44]         Effect="Permit">
    [g45]         <Description>
    [g46]           A person may read any medical record in the
    [g47]           http://www.med.example.com/records.xsd namespace
    [g48]           for which he or she is the designated parent or guardian,
    [g49]           and for which the patient is under 16 years of age
    [g50]         </Description>
    [g51]         <Target>
    [g52]           <AnyOf>
    [g53]             <AllOf>
    [g54]               <Match
    [g55]                 MatchId="urn:oasis:names:tc:xacml:1.0:function:anyURI-equal">
    [g56]                 <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#anyURI"
    [g57]                   >urn:example:med:schemas:record</AttributeValue>
    [g58]                 <AttributeDesignator
    [g59]                   MustBePresent="false"
    [g60]                  Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
    [g61]                AttributeId= "urn:oasis:names:tc:xacml:2.0:resource:target-namespace"
    [g62]                  DataType="http://www.w3.org/2001/XMLSchema#anyURI"/>
    [g63]               </Match>
    [g64]               <Match
    [g65]                 MatchId="urn:oasis:names:tc:xacml:3.0:function:xpath-node-match">
    [g66]                 <AttributeValue
    [g67]                   DataType="urn:oasis:names:tc:xacml:3.0:data-type:xpathExpression"
    [g68]            XPathCategory="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
    [g69]                   >md:record</AttributeValue>
    [g70]                 <AttributeDesignator
    [g71]                   MustBePresent="false"
    [g72]                  Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
    [g73]                   AttributeId="urn:oasis:names:tc:xacml:3.0:content-selector"
    [g74]                  DataType="urn:oasis:names:tc:xacml:3.0:data-type:xpathExpression"/>
    [g75]               </Match>
    [g76]             </AllOf>
    [g77]           </AnyOf>
    [g78]           <AnyOf>
    [g79]             <AllOf>
    [g80]               <Match
    [g81]                 MatchId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
    [g82]                 <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string"
    [g83]                    >read</AttributeValue>
    [g84]                 <AttributeDesignator
    [g85]                   MustBePresent="false"
    [g86]                   Category="urn:oasis:names:tc:xacml:3.0:attribute-category:action"
    [g87]                   AttributeId="urn:oasis:names:tc:xacml:1.0:action:action-id"
    [g88]                   DataType="http://www.w3.org/2001/XMLSchema#string"/>
    [g89]               </Match>
    [g90]             </AllOf>
    [g91]           </AnyOf>
    [g92]         </Target>
    [g93]         <Condition>
    [g94]           <Apply FunctionId="urn:oasis:names:tc:xacml:1.0:function:and">
    [g95]             <Apply FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
    [g96]               <Apply
    [g97]              FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-one-and-only">
    [g98]                 <AttributeDesignator
    [g99]                   MustBePresent="false"
   [g100]              Category="urn:oasis:names:tc:xacml:1.0:subject-category:access-subject"
   [g101]                  AttributeId="urn:oasis:names:tc:xacml:3.0:example:attribute:parent-guardian-id"
   [g102]                   DataType="http://www.w3.org/2001/XMLSchema#string"/>
   [g103]               </Apply>
   [g104]               <Apply
   [g105]              FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-one-and-only">
   [g106]                 <AttributeSelector
   [g107]                  MustBePresent="false"
   [g108]                  Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
   [g109]          Path="md:record/md:parentGuardian/md:parentGuardianId/text()"
   [g110]                   DataType="http://www.w3.org/2001/XMLSchema#string"/>
   [g111]               </Apply>
   [g112]             </Apply>
   [g113]             <VariableReference VariableId="17590035"/>
   [g114]           </Apply>
   [g115]         </Condition>
   [g116]       </Rule>
   [g117]     </Policy>

     [h1]     <?xml version="1.0" encoding="UTF-8"?>
     [h2]     <Policy
     [h3]       xmlns="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"
     [h4]       xmlns:xacml ="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"
     [h5]       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     [h6]       xsi:schemaLocation="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17 http://docs.oasis-open.org/xacml/3.0/xacml-core-v3-schema-wd-17.xsd"
     [h7]       xmlns:md="http:www.med.example.com/schemas/record.xsd"
     [h8]       PolicyId="urn:oasis:names:tc:xacml:3.0:example:policyid:3"
     [h9]       Version="1.0"
    [h10]       RuleCombiningAlgId="urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:deny-overrides">
    [h11]       <Description>
    [h12]         Policy for any medical record in the
    [h13]         http://www.med.example.com/schemas/record.xsd namespace
    [h14]       </Description>
    [h15]       <PolicyDefaults>
    [h16]         <XPathVersion>http://www.w3.org/TR/1999/REC-xpath-19991116</XPathVersion>
    [h17]       </PolicyDefaults>
    [h18]       <Target>
    [h19]         <AnyOf>
    [h20]           <AllOf>
    [h21]             <Match
    [h22]               MatchId="urn:oasis:names:tc:xacml:1.0:function:anyURI-equal">
    [h23]               <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#anyURI"
    [h24]                 >urn:example:med:schemas:record</AttributeValue>
    [h25]               <AttributeDesignator
    [h26]                 MustBePresent="false"
    [h27]                 Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
    [h28]                 AttributeId="urn:oasis:names:tc:xacml:2.0:resource:target-namespace"
    [h29]                 DataType="http://www.w3.org/2001/XMLSchema#anyURI"/>
    [h30]             </Match>
    [h31]           </AllOf>
    [h32]         </AnyOf>
    [h33]       </Target>
    [h34]       <Rule RuleId="urn:oasis:names:tc:xacml:3.0:example:ruleid:3"
    [h35]         Effect="Permit">
    [h36]         <Description>
    [h37]           A physician may write any medical element in a record
    [h38]           for which he or she is the designated primary care
    [h39]           physician, provided an email is sent to the patient
    [h40]         </Description>
    [h41]         <Target>
    [h42]           <AnyOf>
    [h43]             <AllOf>
    [h44]               <Match
    [h45]                 MatchId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
    [h46]                 <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string"
    [h47]                   >physician</AttributeValue>
    [h48]                 <AttributeDesignator
    [h49]                   MustBePresent="false"
    [h50]              Category="urn:oasis:names:tc:xacml:1.0:subject-category:access-subject"
    [h51]                   AttributeId="urn:oasis:names:tc:xacml:3.0:example:attribute:role"
    [h52]                   DataType="http://www.w3.org/2001/XMLSchema#string"/>
    [h53]               </Match>
    [h54]             </AllOf>
    [h55]           </AnyOf>
    [h56]           <AnyOf>
    [h57]             <AllOf>
    [h58]               <Match
    [h59]                  MatchId="urn:oasis:names:tc:xacml:3.0:function:xpath-node-match">
    [h60]                  <AttributeValue
    [h61]                   DataType="urn:oasis:names:tc:xacml:3.0:data-type:xpathExpression"
    [h62]            XPathCategory="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
    [h63]                     >md:record/md:medical</AttributeValue>
    [h64]                  <AttributeDesignator
    [h65]                    MustBePresent="false"
    [h66]                  Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
    [h67]                    AttributeId="urn:oasis:names:tc:xacml:3.0:content-selector"
    [h68]                  DataType="urn:oasis:names:tc:xacml:3.0:data-type:xpathExpression"/>
    [h69]               </Match>
    [h70]             </AllOf>
    [h71]           </AnyOf>
    [h72]           <AnyOf>
    [h73]             <AllOf>
    [h74]               <Match
    [h75]                 MatchId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
    [h76]                 <AttributeValue
    [h77]                   DataType="http://www.w3.org/2001/XMLSchema#string"
    [h78]                   >write</AttributeValue>
    [h79]                 <AttributeDesignator
    [h80]                   MustBePresent="false"
    [h81]                   Category="urn:oasis:names:tc:xacml:3.0:attribute-category:action"
    [h82]                   AttributeId="urn:oasis:names:tc:xacml:1.0:action:action-id"
    [h83]                   DataType="http://www.w3.org/2001/XMLSchema#string"/>
    [h84]               </Match>
    [h85]             </AllOf>
    [h86]           </AnyOf>
    [h87]         </Target>
    [h88]         <Condition>
    [h89]           <Apply FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
    [h90]             <Apply
    [h91]              FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-one-and-only">
    [h92]               <AttributeDesignator
    [h93]                 MustBePresent="false"
    [h94]              Category="urn:oasis:names:tc:xacml:1.0:subject-category:access-subject"
    [h95]           AttributeId="urn:oasis:names:tc:xacml:3.0:example: attribute:physician-id"
    [h96]                 DataType="http://www.w3.org/2001/XMLSchema#string"/>
    [h97]             </Apply>
    [h98]             <Apply
    [h99]              FunctionId="urn:oasis:names:tc:xacml:1.0:function:string-one-and-only">
   [h100]               <AttributeSelector
   [h101]                  MustBePresent="false"
   [h102]                 Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
   [h103]      Path="md:record/md:primaryCarePhysician/md:registrationID/text()"
   [h104]                 DataType="http://www.w3.org/2001/XMLSchema#string"/>
   [h105]             </Apply>
   [h106]           </Apply>
   [h107]         </Condition>
   [h108]       </Rule>
   [h109]       <ObligationExpressions>
   [h110]         <ObligationExpression ObligationId="urn:oasis:names:tc:xacml:example:obligation:email"
   [h111]           FulfillOn="Permit">
   [h112]           <AttributeAssignmentExpression
   [h113]             AttributeId="urn:oasis:names:tc:xacml:3.0:example:attribute:mailto">
   [h114]             <AttributeSelector
   [h115]               MustBePresent="true"
   [h116]               Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
   [h117]               Path="md:record/md:patient/md:patientContact/md:email"
   [h118]               DataType="http://www.w3.org/2001/XMLSchema#string"/>
   [h119]           </AttributeAssignmentExpression>
   [h120]           <AttributeAssignmentExpression
   [h121]             AttributeId="urn:oasis:names:tc:xacml:3.0:example:attribute:text">
   [h122]             <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string"
   [h123]             >Your medical record has been accessed by:</AttributeValue>
   [h124]           </AttributeAssignmentExpression>
   [h125]           <AttributeAssignmentExpression
   [h126]             AttributeId="urn:oasis:names:tc:xacml:3.0:example:attribute:text">
   [h127]             <AttributeDesignator
   [h128]               MustBePresent="false"
   [h129]              Category="urn:oasis:names:tc:xacml:1.0:subject-category:access-subject"
   [h130]               AttributeId="urn:oasis:names:tc:xacml:1.0:subject:subject-id"
   [h131]               DataType="http://www.w3.org/2001/XMLSchema#string"/>
   [h132]           </AttributeAssignmentExpression>
   [h133]         </ObligationExpression>
   [h134]       </ObligationExpressions>
   [h135]     </Policy>

           [i1]   <?xml version="1.0" encoding="UTF-8"?>
           [i2]   <Policy
           [i3]     xmlns="urn:oasis:names:tc:xacml:3.0:core:schema:wd-17"
           [i4]     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           [i5]     xmlns:md="http:www.med.example.com/schemas/record.xsd"
           [i6]     PolicyId="urn:oasis:names:tc:xacml:3.0:example:policyid:4"
           [i7]     Version="1.0"
           [i8]     RuleCombiningAlgId="urn:oasis:names:tc:xacml:1.0:rule-combining-algorithm:deny-overrides">
           [i9]     <PolicyDefaults>
          [i10]       <XPathVersion>http://www.w3.org/TR/1999/REC-xpath-19991116</XPathVersion>
          [i11]     </PolicyDefaults>
          [i12]     <Target/>
          [i13]     <Rule
          [i14]       RuleId="urn:oasis:names:tc:xacml:3.0:example:ruleid:4"
          [i15]       Effect="Deny">
          [i16]       <Description>
          [i17]         An Administrator shall not be permitted to read or write
          [i18]         medical elements of a patient record in the
          [i19]         http://www.med.example.com/records.xsd namespace.
          [i20]       </Description>
          [i21]       <Target>
          [i22]         <AnyOf>
          [i23]           <AllOf>
          [i24]             <Match
          [i25]               MatchId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
          [i26]              <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string"
          [i27]               >administrator</AttributeValue>
          [i28]               <AttributeDesignator
          [i29]                 MustBePresent="false"
          [i30]         Category="urn:oasis:names:tc:xacml:1.0:subject-category:access-subject"
          [i31]               AttributeId="urn:oasis:names:tc:xacml:3.0:example:attribute:role"
          [i32]                 DataType="http://www.w3.org/2001/XMLSchema#string"/>
          [i33]             </Match>
          [i34]           </AllOf>
          [i35]         </AnyOf>
          [i36]         <AnyOf>
          [i37]           <AllOf>
          [i38]             <Match
          [i39]               MatchId="urn:oasis:names:tc:xacml:1.0:function:anyURI-equal">
          [i40]              <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#anyURI"
          [i41]               >urn:example:med:schemas:record</AttributeValue>
          [i42]               <AttributeDesignator
          [i43]                 MustBePresent="false"
          [i44]             Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
          [i45]            AttributeId="urn:oasis:names:tc:xacml:2.0:resource:target-namespace"
          [i46]                 DataType="http://www.w3.org/2001/XMLSchema#anyURI"/>
          [i47]             </Match>
          [i48]             <Match
          [i49]               MatchId="urn:oasis:names:tc:xacml:3.0:function:xpath-node-match">
          [i50]               <AttributeValue
          [i51]              DataType="urn:oasis:names:tc:xacml:3.0:data-type:xpathExpression"
          [i52]       XPathCategory="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
          [i53]                  >md:record/md:medical</AttributeValue>
          [i54]               <AttributeDesignator
          [i55]                  MustBePresent="false"
          [i56]             Category="urn:oasis:names:tc:xacml:3.0:attribute-category:resource"
          [i57]             AttributeId="urn:oasis:names:tc:xacml:3.0:content-selector"
          [i58]             DataType="urn:oasis:names:tc:xacml:3.0:data-type:xpathExpression"/>
          [i59]             </Match>
          [i60]           </AllOf>
          [i61]         </AnyOf>
          [i62]         <AnyOf>
          [i63]           <AllOf>
          [i64]             <Match
          [i65]               MatchId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
          [i66]             <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string"
          [i67]                >read</AttributeValue>
          [i68]               <AttributeDesignator
          [i69]                  MustBePresent="false"
          [i70]               Category="urn:oasis:names:tc:xacml:3.0:attribute-category:action"
          [i71]                 AttributeId="urn:oasis:names:tc:xacml:1.0:action:action-id"
          [i72]                 DataType="http://www.w3.org/2001/XMLSchema#string"/>
          [i73]             </Match>
          [i74]           </AllOf>
          [i75]           <AllOf>
          [i76]             <Match
          [i77]               MatchId="urn:oasis:names:tc:xacml:1.0:function:string-equal">
          [i78]              <AttributeValue DataType="http://www.w3.org/2001/XMLSchema#string"
          [i79]               >write</AttributeValue>
          [i80]               <AttributeDesignator
          [i81]                  MustBePresent="false"
          [i82]               Category="urn:oasis:names:tc:xacml:3.0:attribute-category:action"
          [i83]                 AttributeId="urn:oasis:names:tc:xacml:1.0:action:action-id"
          [i84]                 DataType="http://www.w3.org/2001/XMLSchema#string"/>
          [i85]             </Match>
          [i86]           </AllOf>
          [i87]         </AnyOf>
          [i88]       </Target>
          [i89]     </Rule>
          [i90]   </Policy>
#+END_SRC

Again, the AppPAL is considerably clearer, and shorter.
Whilst we can't do the obligation of requiring an email to the patient, we can still require that it is done.


***** DONE Get power cable from Zach and Rae

**** <2016-04-26 Tue>

***** DONE Add /George Theodorakoupulis's talk to sec-priv.
Huh.  RSync uploads only work when connected with an ethernet cable.

***** DONE Start literature review note
In thesis repo... needs work.

***** Adding obligations to SecPAL

#+BEGIN_quote
U says^{oblig_0} f if f_1..f_n where c ∈ AC
∀i∈ 1..n: AC, D |= U says^{oblig_i} f_{i}θ    |- cθ   vars(fθ) = ∅
----------------------------------------------------------- (cond)
AC, D |= U says^{}^{}^{∑^i∈0..n oblig_i} fθ


AC, D |= U says^{oblig_0} y can-act-as x    AC, D |= U says^{oblig_1} y vp
------------------------------------------------------------------ (can-act-as)
AC, D |= U says^{oblig_0 + oblig_1} x vp


AC, D |= U says^{oblig_0} V can-say D' f   AC, D' |= V says^{oblig_1} f
--------------------------------------------------------------- (can-say)
AC, D |= U says^{oblig_0 + oblig_1} f
#+END_quote

**** <2016-04-27 Wed>

First day home for ever!

***** TODO Clean desk
***** TODO Clean fridge
***** TODO Get membership to Lido
***** TODO Unpack
***** TODO Think about what I'm going to do with Ethel Rainicorn.
